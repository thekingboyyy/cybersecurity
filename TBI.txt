1. Handling Special Characters in TARGET

Issue:
The OUTPUT_DIR is created using the TARGET variable directly. If the TARGET includes characters like /, :, or other special symbols (common in URLs), it can lead to invalid directory names or unexpected behavior.

Example:

	•	If TARGET is http://example.com, the directory name becomes scan_results_http://example.com, which includes :// and /, causing issues.

Solution:
Sanitize the TARGET to remove or replace special characters. One common approach is to use sed or parameter expansion to replace non-alphanumeric characters with underscores.

# Sanitize TARGET for directory naming
SANITIZED_TARGET=$(echo "$TARGET" | sed 's/[^a-zA-Z0-9]/_/g')
OUTPUT_DIR="scan_results_$SANITIZED_TARGET"
mkdir -p "$OUTPUT_DIR"

2. Assuming HTTP Protocol for Web Services

Issue:
The script assumes that web services are accessible via http://, even if port 443 (HTTPS) is open. This can lead to failed scans if the service only supports HTTPS.

Solution:
Determine whether the target uses HTTP or HTTPS based on the open ports and adjust the URLs accordingly.

# Determine the protocol based on open ports
if grep -q '443/tcp' "$OUTPUT_DIR/nmap_results.txt"; then
  PROTOCOL="https"
else
  PROTOCOL="http"
fi

Then use $PROTOCOL when running Nikto and Gobuster:

nikto -h "$PROTOCOL://$TARGET" -output "$OUTPUT_DIR/nikto_results.txt"
gobuster dir -u "$PROTOCOL://$TARGET" -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -o "$OUTPUT_DIR/gobuster_results.txt"

3. Quoting Variables to Prevent Word Splitting and Globbing

Issue:
Variables like $OUTPUT_DIR and $TARGET are not quoted, which can lead to word splitting or globbing issues, especially if they contain spaces or special characters.

Solution:
Always quote your variables to ensure they are treated as single arguments.

mkdir -p "$OUTPUT_DIR"

# Example with Nmap
nmap -sS -sV -O -T4 "$TARGET" -oN "$OUTPUT_DIR/nmap_results.txt"

# Similarly, update all other instances

4. Checking if Required Tools Are Installed

Issue:
The script assumes that tools like nmap, nikto, and gobuster are installed and available in the system’s PATH. If any of these tools are missing, the script will fail.

Solution:
Add checks at the beginning of the script to verify that all required tools are installed.

# Function to check if a command exists
check_command() {
  command -v "$1" >/dev/null 2>&1 || { echo >&2 "Error: $1 is not installed. Aborting."; exit 1; }
}

# Check required tools
check_command nmap
check_command nikto
check_command gobuster

5. Validating the Wordlist Path for Gobuster

Issue:
The script uses a hardcoded path for the Gobuster wordlist (/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt). This file might not exist on all systems, leading to Gobuster failures.

Solution:
Check if the wordlist exists before running Gobuster, and provide an informative error message if it doesn’t. Alternatively, allow the user to specify the wordlist as an optional argument.

WORDLIST="/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"

if [ ! -f "$WORDLIST" ]; then
  echo "Error: Wordlist $WORDLIST not found. Please install it or specify a different wordlist."
  exit 1
fi

# Use $WORDLIST in Gobuster
gobuster dir -u "$PROTOCOL://$TARGET" -w "$WORDLIST" -o "$OUTPUT_DIR/gobuster_results.txt"

6. Handling Targets with Protocols Already Specified

Issue:
The script accepts both IPs and URLs as TARGET. If a user provides a URL with a protocol (e.g., http://example.com), the script might incorrectly prepend http:// again, resulting in malformed URLs like http://http://example.com.

Solution:
Detect if the TARGET already includes a protocol and adjust accordingly.

# Extract hostname without protocol
if [[ "$TARGET" =~ ^http:// ]]; then
  HOST="${TARGET#http://}"
  PROTOCOL="http"
elif [[ "$TARGET" =~ ^https:// ]]; then
  HOST="${TARGET#https://}"
  PROTOCOL="https"
else
  HOST="$TARGET"
  # Determine protocol based on open ports as before
  if grep -q '443/tcp' "$OUTPUT_DIR/nmap_results.txt"; then
    PROTOCOL="https"
  else
    PROTOCOL="http"
  fi
fi

Use $HOST instead of $TARGET when constructing URLs:

nikto -h "$PROTOCOL://$HOST" -output "$OUTPUT_DIR/nikto_results.txt"
gobuster dir -u "$PROTOCOL://$HOST" -w "$WORDLIST" -o "$OUTPUT_DIR/gobuster_results.txt"

7. Enhancing Nmap Vulnerability Scan

Issue:
The Nmap vulnerability scan (nmap --script=vuln) can be time-consuming and may require elevated privileges depending on the scripts being run.

Solution:
Consider allowing the user to enable or disable this step via an optional argument. Additionally, provide feedback if elevated privileges are required.

# Example: Add a flag to enable vulnerability scan
VULN_SCAN=true  # Default to true; can be modified based on user input

if [ "$VULN_SCAN" = true ]; then
  echo "[*] Running Nmap NSE scripts to detect vulnerabilities on $TARGET"
  nmap --script=vuln "$TARGET" -oN "$OUTPUT_DIR/nmap_vuln_scan.txt"
  echo "[*] Nmap vulnerability scan completed. Results saved to $OUTPUT_DIR/nmap_vuln_scan.txt"
fi

8. Adding Error Handling for Each Step

Issue:
If any scanning step fails (e.g., due to network issues or incorrect target), the script continues executing subsequent steps, which might depend on the previous ones.

Solution:
Implement error handling after each critical command to exit or proceed based on the success of the previous step.

# Example with Nmap
nmap -sS -sV -O -T4 "$TARGET" -oN "$OUTPUT_DIR/nmap_results.txt"
if [ $? -ne 0 ]; then
  echo "Error: Nmap scan failed. Aborting."
  exit 1
fi

Alternatively, use set -e at the beginning of the script to exit on any command failure, though this approach requires careful handling to avoid unintended exits.

9. Improving User Feedback and Logging

Issue:
While the script provides basic feedback, enhancing verbosity and logging can help users understand the progress and troubleshoot issues more effectively.

Solution:
Use more descriptive messages and consider logging all output to a file for later review.

# Example of enhanced feedback
echo "========================================"
echo "Starting scan for target: $TARGET"
echo "Results will be saved in: $OUTPUT_DIR"
echo "========================================"

10. Overall Revised Script Incorporating Fixes

Here’s a revised version of your script incorporating the suggested fixes:

#!/bin/bash

# Exit immediately if a command exits with a non-zero status
set -e

# Function to check if a command exists
check_command() {
  command -v "$1" >/dev/null 2>&1 || { echo >&2 "Error: $1 is not installed. Aborting."; exit 1; }
}

# Check required tools
check_command nmap
check_command nikto
check_command gobuster

# Check if an IP/URL is provided
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 <IP or URL>"
  exit 1
fi

TARGET="$1"

# Sanitize TARGET for directory naming
SANITIZED_TARGET=$(echo "$TARGET" | sed 's/[^a-zA-Z0-9]/_/g')
OUTPUT_DIR="scan_results_$SANITIZED_TARGET"
mkdir -p "$OUTPUT_DIR"

echo "========================================"
echo "Starting scan for target: $TARGET"
echo "Results will be saved in: $OUTPUT_DIR"
echo "========================================"

# Step 1: Run Nmap for open ports and services
echo "[*] Running Nmap Scan on $TARGET"
nmap -sS -sV -O -T4 "$TARGET" -oN "$OUTPUT_DIR/nmap_results.txt"
echo "[*] Nmap Scan completed. Results saved to $OUTPUT_DIR/nmap_results.txt"

# Determine the protocol based on open ports
if grep -q '443/tcp' "$OUTPUT_DIR/nmap_results.txt"; then
  PROTOCOL="https"
elif grep -q '80/tcp' "$OUTPUT_DIR/nmap_results.txt"; then
  PROTOCOL="http"
else
  PROTOCOL="http"  # Default to HTTP if no common web ports found
fi

# Step 2: Run Nikto for web vulnerability scanning (if web service is found)
WEB_PORTS=$(grep -E '80/tcp|443/tcp' "$OUTPUT_DIR/nmap_results.txt")
if [ -n "$WEB_PORTS" ]; then
  echo "[*] Web service detected on ports:"
  echo "$WEB_PORTS"
  
  # Extract hostname without protocol if present
  if [[ "$TARGET" =~ ^http:// ]]; then
    HOST="${TARGET#http://}"
  elif [[ "$TARGET" =~ ^https:// ]]; then
    HOST="${TARGET#https://}"
  else
    HOST="$TARGET"
  fi

  echo "[*] Running Nikto Scan on $PROTOCOL://$HOST"
  nikto -h "$PROTOCOL://$HOST" -output "$OUTPUT_DIR/nikto_results.txt"
  echo "[*] Nikto Scan completed. Results saved to $OUTPUT_DIR/nikto_results.txt"
else
  echo "[*] No web service found. Skipping Nikto Scan."
fi

# Step 3: Use Gobuster for directory/file brute-forcing if web service exists
if [ -n "$WEB_PORTS" ]; then
  WORDLIST="/usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt"
  
  if [ ! -f "$WORDLIST" ]; then
    echo "Error: Wordlist $WORDLIST not found. Please install it or specify a different wordlist."
    exit 1
  fi
  
  echo "[*] Running Gobuster to enumerate directories and files on $PROTOCOL://$HOST"
  gobuster dir -u "$PROTOCOL://$HOST" -w "$WORDLIST" -o "$OUTPUT_DIR/gobuster_results.txt"
  echo "[*] Gobuster Scan completed. Results saved to $OUTPUT_DIR/gobuster_results.txt"
fi

# Step 4: Check for common vulnerabilities with Nmap scripts
echo "[*] Running Nmap NSE scripts to detect vulnerabilities on $TARGET"
nmap --script=vuln "$TARGET" -oN "$OUTPUT_DIR/nmap_vuln_scan.txt"
echo "[*] Nmap vulnerability scan completed. Results saved to $OUTPUT_DIR/nmap_vuln_scan.txt"

# Summary of findings
echo "[*] Scanning completed! Check the results in the $OUTPUT_DIR directory."

11. Additional Recommendations

	•	Logging: Consider redirecting all script output to a log file for easier troubleshooting.

exec > >(tee -i "$OUTPUT_DIR/scan.log") 2>&1


	•	Parallelization: For larger scans, you might want to run some scans in parallel to save time, using tools like GNU parallel or background processes.
	•	User Permissions: Some Nmap scans (like -sS) require root privileges. You might want to check if the script is run with sufficient permissions or adjust the scan type accordingly.
	•	Input Validation: Further validate the TARGET to ensure it’s a valid IP address or hostname to prevent erroneous scans.

By addressing these issues and implementing the suggested improvements, your script will be more robust, flexible, and user-friendly.